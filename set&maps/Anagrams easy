Given 2 strings, check if they are anagrams. An anagram is a rearrangement of the letters of one word to form another word. In other words, some permutation of string A must be same as string B.

Input Format

First line of input contains T - number of test cases. Its followed by T lines, each line containing 2 space separated strings.

Constraints

10 points
1 <= T <= 100
1 <= len(S) <= 103
'a' <= S[i] <= 'z'

40 points
1 <= T <= 100
1 <= len(S) <= 105
'a' <= S[i] <= 'z'

Output Format

For each test case, print True/False, separated by newline.


//code for the above problem


#include <bits/stdc++.h>
using namespace std;
int main()
{
  int t;
  cin>>t;
  while(t--){
      string str1,str2;
      cin>>str1>>str2;
      unordered_map<char,int>mp;
      for(int i=0;i<str1.length();i++){
          mp[str1[i]]++;
      }
      for(int i=0;i<str2.length();i++){
          mp[str2[i]]--;
      }
      bool flag=true;
      
      for(auto p : mp)
      {
          if(p.second!=0)
      {
          flag=false;
          break;
      }
     
      }
      if(flag){
          cout<<"True"<<"\n";
      }
      else
        cout<<"False"<<"\n";
  } 
//my code
}
