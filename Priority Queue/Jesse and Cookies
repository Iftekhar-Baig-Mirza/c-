Jesse loves cookies and wants the sweetness of some cookies to be greater than value . To do this, two cookies with the least sweetness are repeatedly mixed. This creates a special combined cookie with:

sweetness  Least sweet cookie   2nd least sweet cookie).

This occurs until all the cookies have a sweetness .

Given the sweetness of a number of cookies, determine the minimum number of operations required. If it is not possible, return .

Example


The smallest values are .
Remove them then return  to the array. Now .
Remove  and return  to the array. Now .
Remove , return  and .
Finally, remove  and return  to . Now .
All values are  so the process stops after  iterations. Return .

Function Description
Complete the cookies function in the editor below.

cookies has the following parameters:

int k: the threshold value
int A[n]: an array of sweetness values
Returns

int: the number of iterations required or 
Input Format

The first line has two space-separated integers,  and , the size of  and the minimum required sweetness respectively.

The next line contains  space-separated integers, .


//code for the above problem


#include <bits/stdc++.h>
using namespace std;
int main() {
    int n,k,i,x,a,b,count=0;
    priority_queue<int,vector<int>,greater<int>> pq;
    cin>>n>>k;
    for(i=0;i<n;i++){
        cin>>x;
        pq.push(x);
    }
    while(pq.size()>1 && pq.top()<k){
        a=pq.top(); pq.pop();
        b=pq.top(); pq.pop();
        pq.push(a+2*b);
        count++;
    }
    if(pq.top()<k)
        cout<<-1;
    else
        cout<<count;
}
//my code